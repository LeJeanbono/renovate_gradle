buildscript {
    ext {
        springBootVersion = '2.2.3.RELEASE'
        lombokVersion = '1.18.22'
        swaggerVersion = '2.6.1'
        jsonVersion = '20180130'
        junitJupiterVersion = '5.2.0'
        commonsLang = '2.6'
        junitVersion = '4.12'
        mongoEmbeddedVersion = '2.2.0'
        httpComponentVersion = '4.5.5'
        apacheCommonVersion = '1.3.2'
        slf4jApiVersion = '1.7.25'
        logbackClassicVersion = '1.2.3'
        yamlVersion = '1.13'
        groovyVersion = '2.5.6'
        dataGeneratorVersion = '0.4.2'
        mapStructVersion = "1.3.1.Final"
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id "org.sonarqube" version "2.8"
    id "com.gorylenko.gradle-git-properties" version "1.5.2"
    id 'com.limark.gitflowsemver' version '0.3.1'
    id 'net.ltgt.apt' version '0.20'
    id 'com.google.cloud.tools.jib' version '1.8.0'
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"
apply plugin: 'net.ltgt.apt-idea'

sourceCompatibility = 11.0

repositories {
    mavenLocal()
    mavenCentral()
}

bootRun {
    systemProperties System.properties
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

compileJava {
    options.compilerArgs += "-Amapstruct.unmappedTargetPolicy=ERROR"
}

dependencyManagement {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {
    // lib common
    implementation('com.cooperl.csuite:csuite-commons:4.1.9')
    implementation("com.cooperl:data-generator-core:${dataGeneratorVersion}")
    implementation("com.cooperl:data-generator-mongodb:${dataGeneratorVersion}")
    // dependencies latest
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    // framework spring
    implementation("org.springframework.boot:spring-boot-starter-web")
    // ajout de la partie rabbit mq
    implementation("org.springframework.boot:spring-boot-starter-integration")
    implementation("org.springframework.boot:spring-boot-starter-amqp")
    implementation("org.springframework.integration:spring-integration-amqp")

    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-mustache")

    implementation("org.springframework.boot:spring-boot-configuration-processor")

    // spring actuatororg.bson.json.JsonParseException: JSON reader expected an integer or a string but found 'ISODate'.
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    implementation("org.springframework.boot:spring-boot-starter-data-redis")

    // PDF
    implementation("org.xhtmlrenderer:flying-saucer-pdf-openpdf:9.1.18")
    implementation("net.sf.jtidy:jtidy:r938")

    // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy
    implementation("org.codehaus.groovy:groovy:${groovyVersion}")

    // commons lang
    implementation("commons-lang:commons-lang:${commonsLang}")

    implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus'

    // ajout de lombok
    compileOnly("org.projectlombok:lombok:${lombokVersion}")

    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    // json
    implementation("org.json:json:${jsonVersion}")
    //framework test unitaire
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation("junit:junit:${junitVersion}")
    testImplementation("de.flapdoodle.embed:de.flapdoodle.embed.mongo:${mongoEmbeddedVersion}")

    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    implementation("org.apache.httpcomponents:httpclient:${httpComponentVersion}")

    // https://mvnrepository.com/artifact/org.apache.commons/commons-io
    implementation("org.apache.commons:commons-io:${apacheCommonVersion}")

    // groovy engine
    // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy-jsr223
    runtimeOnly("org.codehaus.groovy:groovy-jsr223:${groovyVersion}")

    // log groovy
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation("org.slf4j:slf4j-api:${slf4jApiVersion}")

    // YAML deserialization
    implementation("com.esotericsoftware.yamlbeans:yamlbeans:${yamlVersion}")

    implementation 'io.jsonwebtoken:jjwt-api:0.10.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.10.5', 'io.jsonwebtoken:jjwt-jackson:0.10.5'

    implementation 'org.javassist:javassist:3.18.2-GA'
    implementation 'com.github.cloudyrock.mongock:mongock-spring:3.2.2.BETA'

    implementation 'com.github.jknack:handlebars:4.1.2'

    // pour le pool redis
    implementation group: 'org.apache.commons', name: 'commons-pool2', version: '2.8.0'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    testImplementation("ch.qos.logback:logback-classic:${logbackClassicVersion}")

    //framework test unitaire
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    testImplementation("org.assertj:assertj-core:3.11.1")

    testImplementation "org.mockito:mockito-core:2.25.0"
    testImplementation("de.redsix:pdfcompare:1.1.50")
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
}

springBoot {
    buildInfo()
}

sonarqube {
    sourceSets.main.java.outputDir = new File(buildDir, "classes/main")
    sourceSets.test.java.outputDir = new File(buildDir, "classes/test")
    properties {
        // Ignore les tests pour le code smell
        property "sonar.test.exclusions", "**/*Test.java"
        property "sonar.coverage.exclusions", "**/common/config/*,**/common/exception/security/*,**/common/entity/*,**/rapport/entity/*,**/rapport/exception/*,**/rapport/bus/entity/*,**/rapport/ws/dto/*,**/changelogs/*,**/AdviceController.java"
    }
}

test {
    filter {
        //include specific method in any of the tests
        includeTestsMatching "*Test"
    }
    systemProperty 'user.language', 'fr'
    systemProperty 'user.country', 'FR'
    systemProperty 'user.timezone', 'UTC'
    maxHeapSize = '1G'
}

jib {
    from {
        image = 'gcr.io/distroless/java@sha256:f9fe0de7f8ded68f757d99e9d165b96e89e00d4cef80d204aa76bc0b8ffc4576'
    }
    container {
        // fixe le creation timestamp de l'image à l'heure actuelle
        // sinon c'est 01/01/1970 par défaut et gcloud list images (utilisé par csuite-cli pour récupérer les dernières images) ne renvoie pas les images dans l'ordre
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
}
